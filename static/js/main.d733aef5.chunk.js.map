{"version":3,"sources":["contact.js","contacts.js","App.js","serviceWorker.js","index.js"],"names":["Contact","this","props","firstName","lastName","phone","gender","class","Component","ContactsClass","state","contacts","filter","value","male","female","undefine","changeFilter","event","setState","target","settingsGender","name","checked","regex","RegExp","data","item","test","className","size","onChange","height","placeholder","type","id","length","map","index","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d733aef5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nexport default class Contact extends Component{\r\n    render(){\r\n    return (\r\n            \r\n            <ul><b>\r\n                <li>{this.props.firstName}</li>\r\n                <li>{this.props.lastName}</li></b>\r\n                <li>{this.props.phone}</li>\r\n                <li> \r\n                    {\r\n                        !this.props.gender? (<i class=\"fas fa-question-circle\"></i>) : (this.props.gender==='male'?\r\n                        <i class=\"fas fa-male\"></i> : <i class=\"fas fa-female\"></i>)   \r\n                    }\r\n                    {this.props.gender}\r\n                </li>    \r\n            </ul> \r\n            \r\n        );\r\n    }\r\n}\r\n//vfv","import React, { Component } from 'react';\r\nimport Contact from './contact';\r\n\r\n\r\n\r\n\r\nexport default class ContactsClass extends Component {\r\n    state = {\r\n        contacts: [{\r\n            firstName: \"Барней\",\r\n            lastName: \"Стинсовский\",\r\n            phone: \"+380956319521\",\r\n            gender: \"male\"\r\n        }, {\r\n            firstName: \"Робин\",\r\n            lastName: \"Щербатская\",\r\n            phone: \"+380931460123\",\r\n            gender: \"female\"\r\n        }, {\r\n            firstName: \"Аномный\",\r\n            lastName: \"Анонимус\",\r\n            phone: \"+380666666666\"\r\n        }, {\r\n            firstName: \"Лилия\",\r\n            lastName: \"Олдровна\",\r\n            phone: \"+380504691254\",\r\n            gender: \"female\"\r\n        }, {\r\n            firstName: \"Маршэн\",\r\n            lastName: \"Эриксонян\",\r\n            phone: \"+380739432123\",\r\n            gender: \"male\"\r\n        }, {\r\n            firstName: \"Теодор\",\r\n            lastName: \"Мотсбэс\",\r\n            phone: \"+380956319521\",\r\n            gender: \"male\"\r\n        }],\r\n        filter: '',\r\n        value: '',\r\n        male: true,\r\n        female: true,\r\n        undefine: true\r\n      }\r\n      \r\n      changeFilter = (event) =>{\r\n        this.setState({filter: event.target.value})\r\n      }\r\n      \r\n      settingsGender = (event) => {\r\n        this.setState({\r\n          [event.target.name]: event.target.checked\r\n        });\r\n      };\r\n      \r\n      \r\n      render(){\r\n        const { filter, female, male, undefine } = this.state;\r\n        const regex= new RegExp(this.state.filter, 'g');\r\n        \r\n        const data = this.state.contacts.filter((item)=>(regex.test(item.lastName)||\r\n        regex.test(item.firstName)||regex.test(item.phone)) && \r\n        (item.gender ? (female && item.gender === \"female\") || (male && item.gender === \"male\") : undefine));\r\n        \r\n        \r\n        return(\r\n        <div className=\"Container\">\r\n          <div className=\"Header\">\r\n            <input className=\"Input\" size=\"30\" onChange={this.changeFilter} value={filter} height=\"0px\" placeholder=\"Search...\"/>\r\n            <div>\r\n            <label className=\"checkbox-label\">\r\n              <input type=\"checkbox\" id=\"male\" className=\"checkbox\" onChange={this.settingsGender} name=\"male\" checked={male}/><span>Male</span>\r\n              <input type=\"checkbox\" id=\"famale\" className=\"checkbox\" onChange={this.settingsGender} name=\"female\" checked={female}/><span>Female</span>\r\n              <input type=\"checkbox\" id=\"undefine\" className=\"checkbox\" onChange={this.settingsGender} name=\"undefine\" checked={undefine}/><span>Undefine</span>\r\n            </label>\r\n            </div>\r\n          </div>\r\n          <div className=\"Contact\">\r\n          {\r\n           data.length ?\r\n           data.map((item,index) => (\r\n           <Contact key={index+item}\r\n           firstName={item.firstName}\r\n           lastName={item.lastName}\r\n           phone={item.phone}\r\n           gender={item.gender} \r\n           />)) : <p>NO DATA</p>\r\n            }\r\n          </div>\r\n        </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\nimport './contacts.css'\n\nimport ContactsClass from './contacts'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ContactsClass />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}